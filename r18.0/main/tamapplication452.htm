<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"><HTML lang="en"><HEAD><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1"><link rel="stylesheet" type="text/css" href="../common_files/tabcontent.css" />
<link rel="stylesheet" type="text/css" href="../common_files/casewise.css" />
<link rel="stylesheet" type="text/css" media="print" href="../common_files/casewise_print.css" />








 
<link rel="stylesheet" type="text/css" href="../common_files/casewise_objects.css" />

<script type="text/javascript" src="../common_files/tabcontent.js">

/***********************************************
* Ajax Tabs Content script- © Dynamic Drive DHTML code library (www.dynamicdrive.com)
* This notice MUST stay intact for legal use
* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code
***********************************************/

</script>




























<TITLE>(1) TAM Application Type Business Process Management &amp; Workflow</TITLE><META NAME="author" CONTENT="DFREED"></HEAD><P style="width:60%;margin-bottom:20px;"><A NAME="topofpagetamapplication452htm"></A><div class="logo"><a href="http://www.tmforum.org"><img src="../common_files/TMF_FrameworxBanner_indexonly.gif" height=60></a></div>



<p class=navbar>
<span style="float:right;font-color:white;margin-right=1%;">

<span class="emaillink">
<a href="mailto:frameworx@tmforum.org?subject=Feedback on Frameworx 18.0&body=Category:(1) TAM Application Type%0A%0AName:Business Process Management & Workflow%0A%0AUUID:">Feedback</a>
</span>
 |  <a href="../common_files/license.htm" class=navlink>License Details</a></span>

</div>


<div class="leftbar">

<p class="leftbaritem"><a href="diagram8f0b6de0e4d611de953f001de065480b.htm" class=leftlink>Frameworx Home</a>
<p class="leftbaritem"><a href="diagram212bd3bc1d9811db9063000802da1ce2.htm" class=leftlink>Application Framework (TAM)</a>
<p class="leftbaritem"><a href="diagramac379ad6e0054204b29009c3d82ff997.htm" class=leftlink>Business Process Framework (eTOM)</a>
<p class="leftbaritem"><a href="indexdiagramflows.htm" class=leftlink>Business Process Framework Flows</a>
<p class="leftbaritem"><a href="indexdiagram.htm" class=leftlink>All Diagrams</a>
<p class="leftbaritem"><a href="indexetomprocess.htm" class=leftlink>Frameworx Processes</a>
<p class="leftbaritem"><a href="indextamapplication.htm" class=leftlink>Frameworx Applications</a>
<p class="leftbaritem"><a href="indexFRAMEWORXKEYINDICATORS.htm" class=leftlink>Frameworx Metrics</a>
<p class="leftbaritem"><a href="indexissue.htm" class=leftlink>Views</a>

</div>


<div class="cpoutput">












<h1 id="processheader">Frameworx Application: Business Process Management & Workflow</h1>

<ul id="maintab" class="shadetabs">

<li class="selected"><a href="#" rel="tcontent1">Description</a></li>
<li><a href="#" rel="tcontent2">Associations</a></li>
</ul>


<div class="tabcontentstyle">

                <div id="tcontent1" class="tabcontent">


<p id="cat"><b>Category</b>: (1) TAM Application Type 
<p id="ID"><b>Application Identifier</b>: 10.2
<p id="mat"><b>Maturity Level</b>: 4


	<h3>Overview</h3>
              
	<p>Business Process Management (BPM) is the evolution of earlier concepts called workflow management (also known as Process Flow Management). As operators understand the need to introduce much greater flexibility and day-day change into their business processes, BPM and workflow management techniques, pioneered in manufacturing industry, are becoming more and more visible in the communications industry. Business flexibility is crucial for an operator as well as high levels of automation of its processes, not just of basic process flows but of complex and exception handling areas. One of the cardinal principles of Frameworx is to allow this by abstraction of business processes from application logic. The emergence of N-tier computing and component-oriented environments (such as COM and J2EE) allow for this principle in the same manner that the emergence of SQL and the two-tier client/server architecture enabled the abstraction of data management from application code. By separating business process management as an independent function, applications can be designed around existing processes, and thus to take advantage of shared business logic rather than reinventing and recoding it for each application.There are considerable benefits to an operator in adopting this type of approach and would include:Reduced costsStaff savingsCash flow improvementBetter customer perceptionFaster and more flexible response to implement new processes or amend existing ones to accommodate new products / servicesTo understand how BPM fits with an operator and its infrastructure, it is helpful to examine the individual components of BPM. While commercial implementations vary in their specific definitions and software composition, most fit within the basic framework described below. Note that although some systems offer the ability to automate activities and define business rules, those that lack the fundamental components below cannot realistically be used as a BPM system.A BPM system is defined by the components of:Execution EngineProcess Designer,Process DefinitionsActivity MonitorUser interface which may be a combination of a Windows client application, HTML based Work Portal, or an exposed API or Web serviceThe majority of BPM systems on the market today are component-oriented and allow each of the individual pieces listed above to be deployed independently on individual servers. Individual business processes are defined by the process owner in a Process Definition, (increasingly expressed in a standard language such as UML or some variation of XML). Each Process Definition may be composed of both manual activities and automated activities. Once defined and validated within the Process Designer, processes are instantiated by an Execution Engine. The Activity Monitor provides access to status and performance metrics on the execution of processes. End-to-end process ‘orchestration’It is unlikely that the implementation of a Frameworx based ‘lean’ migration program will be a ‘big bang’ type of approach implementing all new systems. Therefore, the Enterprise Integration Framework will need to integrate end-to-end processes across various ‘islands of automation’ ranging from existing legacy systems to new commercial-off-the-shelf technology. This approach is sometimes called ‘orchestration’ in process. An orchestration-based approach offers the ability to manage processes of greater complexity, (such as complex business service provisioning etc.) with far more efficiency than is otherwise possible with alternative approaches. The key to this is a modular approach to managing business rules, relationships, and activities.Within a simple workflow automation paradigm, processes are defined “end-to-end” with all possible paths (or more commonly a single path) pre-determined. Thus ‘Step 5’ always follows ‘Step 4’ and precedes ‘Step 6’ even if different instances of an otherwise standard process may require a different sequence.Orchestration allows for the sequencing of steps to be determined during the “run-time” instance of a process, with paths determined by evolving context resulting from each new step. Thus the potential number of paths and outcomes may otherwise be too complex to define in terms of pre-determined “If-Then-Else” rules, but may be easily resolved through human interaction and decision-making. This highlights the key architectural difference between automation and orchestration. Given the inherent complexity and constant changes within an operator’s business environment, effectively managing processes requires the agility to shift with changes in context, rather than always being bound to the same scripted flow. This requires the unique ability to define processes as a set of atomic, goal-based activities with the enforcement of basic parameters (e.g., time limits, data variables), while separating the execution logic activities from the higher-level process definition. Process orchestration is not limited to invoking software, but rather represents a shift from task-based to goal-oriented process definition. Web services and other forms of software automation are utilized through process orchestration, yet not to the exclusion of manual, human-driven activities.

	<h3>Functionality</h3>

                <p>

      	<h3>Supported Business Services</h3>
              
	<p>
                 </div>


<div id="tcontent2" class="tabcontent">

	
	<!-- associations in this tab, produced by CP itself-->


























<H2>(1) TAM Application Type Business Process Management &amp; Workflow</H2>
<P><H3>Appears on these diagrams:</H3>
<UL>
<LI><A HREF="diagramf062545fab6011e2bcb7f04da23a38c8.htm">10. Integration Infrastructure</A></li>
<LI><A HREF="diagram212bd3bc1d9811db9063000802da1ce2.htm">Application Framework Level 1 Overview</A></li>
<LI><A HREF="diagram276a38f45b6011e780cb000d3a02ed0d.htm">Business Process Management &amp; Workflow</A></li>
</UL></P>
<H3>is a more detailed diagram for the</H3>
<UL>
<LI>
<A HREF="diagram276a38f45b6011e780cb000d3a02ed0d.htm">Business Process Management &amp; Workflow</A></li>
</UL>
<H3>Issues</H3><ul><li>Application Framework 12.5 Modification</li></ul><H3>Frameworx Domains (Horizontal)</H3><ul><li><A HREF="tamdomain10.htm">Integration Infrastructure Domain</A></li></ul><HR>
<P>












</div> <!--CLOSE TAB 1-->

</div><!--end of tabs container-->

<script type="text/javascript">
//Start Tab Content script for UL with id="maintab" Separate multiple ids each with a comma.
initializetabcontent("maintab")
</script>






















<!--closure for all pages here-->
</div><!--end CPoutput tag-->
<div style="display:none;">



<BR><SMALL>
Created from the TM Forum Model Frameworx 18.0 on 8/22/2018 at 16:18</SMALL></P>
</BODY>
</HTML>
